---
layout: post
title: How To Optimize Your Hackday 
---

h1. {{ page.title }}


You roll into the office at 9am - ecstatic. Today is the best kind of day there is - a hackday. Your soon to be Dorito coated fingers are free to work on whatever they want. Personally I like to try to build a new service or product and launch it by 5pm. Using your hackday like this means it's all about speed - you have about eight hours to go from an empty repository to a fully deployed app. Making these days productive means ruthlessly removing anything from your workflow that slows you down. After two years of hackdays - here are what I consider best practices to optimize your time.  


h2. Use a dynamic language 

Don't get me wrong, I'm generally a fan of static typing. But in my experience static languages can really slow down hackday development for two primary reasons. To illustrate assume you're building some kind of webservice that sends/receives JSON data. 

The first issue is in a dynamic language it's generally quite easy to setup hotswapping of your code - meaning when you change your source files your webservice doesn't need to be restarted to get the new changes. Yes you can do this with static languages but in my experience you can easily spend the entire day just trying to set that up - for example with Ruby you can just run one command: gem install shotgun. With Scala you can spend hours just trying to get jrebel & jetty to work together.

The second advantage of using a dynamic language is that they are intrinsically more flexible; the rigidity of a static language can really slow you down. It's much easier to prototype changes quickly when you don't have to worry about a type system getting in your way. 

h2. Ruthlessly cut features 

You want your hackday projects to be very much an minimum viable product. Throw out anything that isn't essential. Your goal should be to just get something working. Remember hackdays are more about a proof of concept rather than a fully functional production service. <strong>Make it work, make it pretty, then make it fast</strong>.   

h2. Work individually or in small teams

We've tried doing full team projects on a hackday - but the group size was just too big - it became impossible to make decisions quickly. If you're aiming to launch a webservice or app by the end of the day the ideal group size is three. The best mix I've found was during a hackathon where we had 1 backend engineer, 1 front-end engineer and a designer. 

h2. Frameworks & Libraries can make or break you 

Generally frameworks & libraries are a good thing, they exist to abstract away common functionality you would otherwise end up duplicating. But on hackdays you should be avoid any frameworks that require a lot of configuration like the plague. Nothing ruins a hackday more than configuration files that bog you down. Sometimes it's just faster to implement something yourself. Just don't deploy your implementation to production if your hackday project ever grows up - you probably forgot an edge case or five :). 

h2. Heroku is your best friend

Seriously, Heroku is the platform to use on a hackday. Using AWS directly or your own servers is fine for production services but the setup time involved absolutely sucks. With Heroku you simply click a button to make a new project then deploy it with a git push command. Best of all for database sizes under 5mb it's totally free - most hackday projects fall into this category.  

h2. Remember to have fun

Regardless of what happens - you should come away from a hackday knowing that you had a lot of fun and learned something new. The most successful hackdays I've had are also the ones where I had the most fun.  
